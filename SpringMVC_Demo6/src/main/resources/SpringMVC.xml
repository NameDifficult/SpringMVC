<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="mvc"/>

    <!-- 配置thymeleaf视图解析器-->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <mvc:view-controller path="/" view-name="index"/>
    <mvc:view-controller path="/file" view-name="file"/>
    <mvc:annotation-driven/>

    <!-- 配置文件上传解析器，将上传的文件封装成MultipartFile -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>

    <!--
            配置拦截器
                执行顺序：preHandle是按照配置的顺序进行执行
                        剩下的两个Handle按照配置的反序进行执行

           若某个拦截器的preHandle返回了false，preHandle返回了false的和他之前的拦截器都会执行preHandle，postHandle都不执行，
           返回false的拦截器之前的拦截器都会执行afterHandle
    -->
    <mvc:interceptors>
        <!-- 以下两种方式都是  对所有请求进行拦截 -->
<!--        <bean class="mvc.interceptor.FirstInterceptor"></bean>-->
<!--        <ref bean="firstInterceptor"></ref>-->
        <mvc:interceptor>
            <!-- 拦截所有-->
            <mvc:mapping path="/**"/>
            <!--  排除掉 /  -->
            <mvc:exclude-mapping path="/"/>
            <ref bean="firstInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>



    <!-- 配置异常处理 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!--
                     若出现key中指定异常，会指定调整到值中的页面
                        key: 什么异常
                        值：  异常页面
                -->
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
        <!--
                <p th:text="${ex}"/>
                设置将异常信息共享到请求域中的键
        -->
        <property name="exceptionAttribute" value="ex"></property>
    </bean>

</beans>